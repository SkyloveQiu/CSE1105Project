/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 22:58:34 GMT 2020
 */

package nl.tudelft.oopp.group43.project.models;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.mockito.Mockito.mock;

import java.math.BigDecimal;
import nl.tudelft.oopp.group43.project.ViolatedAssumptionAnswer;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.stubbing.Answer;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BuildingFoodProductTest extends BuildingFoodProductTestScaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct();
        BigDecimal bigDecimal0 = new BigDecimal(0.0);
        buildingFoodProduct0.setPrice(bigDecimal0);
        BigDecimal bigDecimal1 = buildingFoodProduct0.getPrice();
        assertSame(bigDecimal1, bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = mock(BuildingFoodProductId.class, (Answer) new ViolatedAssumptionAnswer());
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        FoodProduct foodProduct0 = mock(FoodProduct.class, (Answer) new ViolatedAssumptionAnswer());
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct(buildingFoodProductId0, building0, foodProduct0);
        BigDecimal bigDecimal0 = new BigDecimal(2582L);
        buildingFoodProduct0.setPrice(bigDecimal0);
        BigDecimal bigDecimal1 = buildingFoodProduct0.getPrice();
        assertEquals((byte) 22, bigDecimal1.byteValue());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct();
        BigDecimal bigDecimal0 = new BigDecimal((-1.0));
        buildingFoodProduct0.setPrice(bigDecimal0);
        BigDecimal bigDecimal1 = buildingFoodProduct0.getPrice();
        assertEquals((byte) (-1), bigDecimal1.byteValue());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct((BuildingFoodProductId) null, (Building) null, (FoodProduct) null);
        buildingFoodProduct0.setId((BuildingFoodProductId) null);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = mock(BuildingFoodProductId.class, (Answer) new ViolatedAssumptionAnswer());
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        FoodProduct foodProduct0 = mock(FoodProduct.class, (Answer) new ViolatedAssumptionAnswer());
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct(buildingFoodProductId0, building0, foodProduct0, (BigDecimal) null);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct((BuildingFoodProductId) null, (Building) null, (FoodProduct) null);
        buildingFoodProduct0.setFoodProduct((FoodProduct) null);
    }


    @Test(timeout = 4000)
    public void test07() throws Throwable {
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct((BuildingFoodProductId) null, (Building) null, (FoodProduct) null);
        FoodProduct foodProduct0 = buildingFoodProduct0.getFoodProduct();
        assertNull(foodProduct0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct((BuildingFoodProductId) null, (Building) null, (FoodProduct) null);
        BigDecimal bigDecimal0 = buildingFoodProduct0.getPrice();
        assertNull(bigDecimal0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct((BuildingFoodProductId) null, (Building) null, (FoodProduct) null);
        Building building0 = buildingFoodProduct0.getBuilding();
        assertNull(building0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct((BuildingFoodProductId) null, (Building) null, (FoodProduct) null);
        buildingFoodProduct0.setBuilding((Building) null);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        BuildingFoodProduct buildingFoodProduct0 = new BuildingFoodProduct((BuildingFoodProductId) null, (Building) null, (FoodProduct) null);
        BuildingFoodProductId buildingFoodProductId0 = buildingFoodProduct0.getId();
        assertNull(buildingFoodProductId0);
    }
}
