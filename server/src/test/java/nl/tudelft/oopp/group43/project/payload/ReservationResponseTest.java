/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:48:49 GMT 2020
 */

package nl.tudelft.oopp.group43.project.payload;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import nl.tudelft.oopp.group43.project.ViolatedAssumptionAnswer;
import nl.tudelft.oopp.group43.project.models.Reservation;
import nl.tudelft.oopp.group43.project.models.Room;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.stubbing.Answer;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ReservationResponseTest extends ReservationResponseTestScaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Room room0 = mock(Room.class, (Answer) new ViolatedAssumptionAnswer());
        Reservation reservation0 = mock(Reservation.class, (Answer) new ViolatedAssumptionAnswer());
        ReservationResponse reservationResponse0 = new ReservationResponse(room0, reservation0, "", 1630);
        reservationResponse0.setStatus((-1704));
        assertEquals((-1704), reservationResponse0.getStatus());
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Room room0 = mock(Room.class, (Answer) new ViolatedAssumptionAnswer());
        Reservation reservation0 = mock(Reservation.class, (Answer) new ViolatedAssumptionAnswer());
        ReservationResponse reservationResponse0 = new ReservationResponse(room0, reservation0, "Dz`", 0);
        Reservation reservation1 = mock(Reservation.class, (Answer) new ViolatedAssumptionAnswer());
        reservationResponse0.setReservation(reservation1);
        assertEquals(0, reservationResponse0.getStatus());
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        ReservationResponse reservationResponse0 = new ReservationResponse("85=6@oW}D`l@lCXb@M", (-3016));
        Room room0 = mock(Room.class, (Answer) new ViolatedAssumptionAnswer());
        reservationResponse0.room = room0;
        reservationResponse0.setRoom((Room) null);
        assertEquals((-3016), reservationResponse0.getStatus());
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        ReservationResponse reservationResponse0 = new ReservationResponse((String) null, 0);
        int int0 = reservationResponse0.getStatus();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Room room0 = mock(Room.class, (Answer) new ViolatedAssumptionAnswer());
        Reservation reservation0 = mock(Reservation.class, (Answer) new ViolatedAssumptionAnswer());
        ReservationResponse reservationResponse0 = new ReservationResponse(room0, reservation0, "", (-1));
        reservationResponse0.status = 4891;
        int int0 = reservationResponse0.getStatus();
        assertEquals(4891, int0);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        ReservationResponse reservationResponse0 = new ReservationResponse("85=6@oW}D`l@lCXb@M", (-3016));
        Room room0 = mock(Room.class, (Answer) new ViolatedAssumptionAnswer());
        doReturn((String) null).when(room0).toString();
        reservationResponse0.room = room0;
        reservationResponse0.getRoom();
        assertEquals((-3016), reservationResponse0.getStatus());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        ReservationResponse reservationResponse0 = new ReservationResponse("85=6@oW}D`l@lCXb@M", (-3016));
        reservationResponse0.reservation = null;
        Reservation reservation0 = mock(Reservation.class, (Answer) new ViolatedAssumptionAnswer());
        doReturn((String) null).when(reservation0).toString();
        reservationResponse0.reservation = reservation0;
        reservationResponse0.getReservation();
        assertEquals((-3016), reservationResponse0.getStatus());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        ReservationResponse reservationResponse0 = new ReservationResponse((String) null, 871);
        reservationResponse0.getMessage();
        assertEquals(871, reservationResponse0.getStatus());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Room room0 = mock(Room.class, (Answer) new ViolatedAssumptionAnswer());
        Reservation reservation0 = mock(Reservation.class, (Answer) new ViolatedAssumptionAnswer());
        ReservationResponse reservationResponse0 = new ReservationResponse(room0, reservation0, "Dz`", 0);
        reservationResponse0.setMessage("");
        reservationResponse0.getMessage();
        assertEquals("", reservationResponse0.getMessage());
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        ReservationResponse reservationResponse0 = new ReservationResponse("85=6@oW}D`l@lCXb@M", (-3016));
        reservationResponse0.getRoom();
        assertEquals((-3016), reservationResponse0.getStatus());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Room room0 = mock(Room.class, (Answer) new ViolatedAssumptionAnswer());
        Reservation reservation0 = mock(Reservation.class, (Answer) new ViolatedAssumptionAnswer());
        ReservationResponse reservationResponse0 = new ReservationResponse(room0, reservation0, "6i>Di>,%.65NcgOs7\"", (-740));
        String string0 = reservationResponse0.getMessage();
        assertEquals((-740), reservationResponse0.getStatus());
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        ReservationResponse reservationResponse0 = new ReservationResponse("85=6@oW}D`l@lCXb@M", (-3016));
        int int0 = reservationResponse0.getStatus();
        assertEquals((-3016), int0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        ReservationResponse reservationResponse0 = new ReservationResponse("85=6@oW}D`l@lCXb@M", (-3016));
        reservationResponse0.getReservation();
        assertEquals((-3016), reservationResponse0.getStatus());
    }
}
