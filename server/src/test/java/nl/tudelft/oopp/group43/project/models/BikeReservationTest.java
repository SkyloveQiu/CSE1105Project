/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 22:56:30 GMT 2020
 */

package nl.tudelft.oopp.group43.project.models;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import java.util.Date;
import nl.tudelft.oopp.group43.project.ViolatedAssumptionAnswer;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.stubbing.Answer;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BikeReservationTest extends BikeReservationTestScaffolding {


    @Test(timeout = 4000)
    public void test01() throws Throwable {
        BikeReservation bikeReservation0 = new BikeReservation();
        Date date0 = bikeReservation0.getDatetimeStart();
        assertNull(date0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        doReturn((String) null).when(date0).toString();
        BikeReservation bikeReservation0 = new BikeReservation(building0, building0, date0, date0);
        Date date1 = bikeReservation0.getDatetimeEnd();
        assertSame(date1, date0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        BikeReservation bikeReservation0 = new BikeReservation((Building) null, (Building) null, (Date) null, (Date) null);
        Building building0 = bikeReservation0.getBuildingByBuildingStart();
        assertNull(building0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        BikeReservation bikeReservation0 = new BikeReservation(building0, building0, date0, date0);
        Integer integer0 = new Integer(1807);
        bikeReservation0.setBikeReservationId(integer0);
        Integer integer1 = bikeReservation0.getBikeReservationId();
        assertEquals(1807, (int) integer1);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        BikeReservation bikeReservation0 = new BikeReservation(building0, building0, (Date) null, (Date) null);
        Integer integer0 = new Integer(0);
        bikeReservation0.setBikeReservationId(integer0);
        Integer integer1 = bikeReservation0.getBikeReservationId();
        assertEquals(0, (int) integer1);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        BikeReservation bikeReservation0 = new BikeReservation(building0, building0, date0, date0);
        Integer integer0 = new Integer((-878));
        bikeReservation0.setBikeReservationId(integer0);
        Integer integer1 = bikeReservation0.getBikeReservationId();
        assertEquals((-878), (int) integer1);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        BikeReservation bikeReservation0 = new BikeReservation(building0, building0, date0, date0);
        bikeReservation0.setBike((Bike) null);
        assertNull(bikeReservation0.getBikeReservationId());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        BikeReservation bikeReservation0 = new BikeReservation();
        Integer integer0 = bikeReservation0.getBikeReservationId();
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        User user0 = mock(User.class, (Answer) new ViolatedAssumptionAnswer());
        Bike bike0 = mock(Bike.class, (Answer) new ViolatedAssumptionAnswer());
        BikeReservation bikeReservation0 = new BikeReservation(building0, date0, user0, bike0);
        assertNull(bikeReservation0.getBikeReservationId());
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        BikeReservation bikeReservation0 = new BikeReservation(building0, building0, date0, date0);
        User user0 = bikeReservation0.getUser();
        assertNull(user0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        BikeReservation bikeReservation0 = new BikeReservation();
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        bikeReservation0.setDatetimeStart(date0);
        assertNull(bikeReservation0.getBikeReservationId());
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        BikeReservation bikeReservation0 = new BikeReservation(building0, building0, date0, date0);
        Bike bike0 = bikeReservation0.getBike();
        assertNull(bike0);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        BikeReservation bikeReservation0 = new BikeReservation();
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        bikeReservation0.setBuildingByBuildingStart(building0);
        assertNull(bikeReservation0.getBikeReservationId());
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        BikeReservation bikeReservation0 = new BikeReservation(building0, building0, (Date) null, (Date) null);
        Date date0 = bikeReservation0.getDatetimeEnd();
        assertNull(date0);
    }


    @Test(timeout = 4000)
    public void test16() throws Throwable {
        BikeReservation bikeReservation0 = new BikeReservation();
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        bikeReservation0.setDatetimeEnd(date0);
        assertNull(bikeReservation0.getBikeReservationId());
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Building building0 = mock(Building.class, (Answer) new ViolatedAssumptionAnswer());
        Date date0 = mock(Date.class, (Answer) new ViolatedAssumptionAnswer());
        doReturn((String) null).when(date0).toString();
        BikeReservation bikeReservation0 = new BikeReservation(building0, building0, date0, date0);
        Date date1 = bikeReservation0.getDatetimeStart();
        assertNull(date1.toString());
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        BikeReservation bikeReservation0 = new BikeReservation();
        Building building0 = bikeReservation0.getBuildingByBuildingEnd();
        assertNull(building0);
    }
}
