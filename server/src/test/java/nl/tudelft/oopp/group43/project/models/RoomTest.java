/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 22:58:34 GMT 2020
 */

package nl.tudelft.oopp.group43.project.models;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class RoomTest extends RoomTestScaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        Room room0 = new Room("");
        String string0 = room0.getRoomName();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        Room room0 = new Room("&t!o#BvV[W(BK6&PZ3");
        Integer integer0 = new Integer(34);
        room0.setId(integer0);
        Integer integer1 = room0.getId();
        assertEquals(34, (int) integer1);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        Room room0 = new Room();
        Integer integer0 = new Integer((-1));
        room0.setId(integer0);
        Integer integer1 = room0.getId();
        assertEquals((-1), (int) integer1);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Room room0 = new Room();
        room0.setAttributes("v8-W$rROQr& /GyE");
        String string0 = room0.getAttributes();
        assertEquals("v8-W$rROQr& /GyE", string0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Room room0 = new Room("");
        room0.setAttributes("");
        String string0 = room0.getAttributes();
        assertEquals("", string0);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        Room room0 = new Room("&t!o#BvV[W(BK6&PZ3");
        room0.setBuilding((Building) null);
        assertEquals("&t!o#BvV[W(BK6&PZ3", room0.getRoomName());
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Room room0 = new Room();
        Integer integer0 = room0.getId();
        assertNull(integer0);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        Room room0 = new Room((Building) null, "CASCADE", "CASCADE");
        assertNull(room0.getId());
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Room room0 = new Room();
        room0.setRoomName("jCH})CW:e");
        String string0 = room0.getRoomName();
        assertEquals("jCH})CW:e", string0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        Room room0 = new Room();
        String string0 = room0.getAttributes();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        Room room0 = new Room("&t!o#BvV[W(BK6&PZ3");
        Building building0 = room0.getBuilding();
        assertNull(building0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        Room room0 = new Room();
        String string0 = room0.getRoomName();
        assertNull(string0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Room room0 = new Room();
        Integer integer0 = new Integer(0);
        room0.setId(integer0);
        Integer integer1 = room0.getId();
        assertEquals(0, (int) integer1);
    }
}
