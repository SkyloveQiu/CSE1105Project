/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:45:42 GMT 2020
 */

package nl.tudelft.oopp.group43.project.payload;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import java.util.List;
import nl.tudelft.oopp.group43.project.ViolatedAssumptionAnswer;
import nl.tudelft.oopp.group43.project.models.Room;
import nl.tudelft.oopp.group43.project.repositories.RoomRepository;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.stubbing.Answer;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class RoomAttributesUpdaterTest extends RoomAttributesUpdaterTestScaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        RoomAttributesUpdater.BucketsList roomAttributesUpdaterBucketsList0 = null;
        try {
            roomAttributesUpdaterBucketsList0 = new RoomAttributesUpdater.BucketsList();

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("java.util.Collections", e);
        }
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
        RoomRepository roomRepository0 = mock(RoomRepository.class, (Answer) new ViolatedAssumptionAnswer());
        doReturn((List<Room>) null).when(roomRepository0).findAll();

        // Undeclared exception!
        try {
            roomAttributesUpdater0.update();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        // Undeclared exception!
        try {
            RoomAttributesUpdater.list_higher_than((-2014));

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater", e);
        }
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        List<Integer> list0 = RoomAttributesUpdater.getRoomSeats();
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        RoomAttributesUpdater.BucketsList roomAttributesUpdaterBucketsList0 = RoomAttributesUpdater.getRoomList();
        assertNotNull(roomAttributesUpdaterBucketsList0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        RoomAttributesUpdater.getTableRooms();
        RoomAttributesUpdater.getRoomList();
        RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
        RoomRepository roomRepository0 = mock(RoomRepository.class, (Answer) new ViolatedAssumptionAnswer());
        doReturn((List) null).when(roomRepository0).findAll();

        ApplicationReadyEvent applicationReadyEvent0 = mock(ApplicationReadyEvent.class, (Answer) new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            roomAttributesUpdater0.onApplicationReady(applicationReadyEvent0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater", e);
        }
    }

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        boolean boolean0 = RoomAttributesUpdater.isRunning();
        assertNotNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test9() throws Throwable {
        RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
        RoomRepository roomRepository0 = mock(RoomRepository.class, (Answer) new ViolatedAssumptionAnswer());
        doReturn((List) null).when(roomRepository0).findAll();
        // Undeclared exception!
        try {
            roomAttributesUpdater0.run();
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater", e);
        }
    }
}
