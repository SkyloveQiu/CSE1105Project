/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 22:56:22 GMT 2020
 */

package nl.tudelft.oopp.group43.project.models;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BuildingFoodProductId_ESTest extends BuildingFoodProductId_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        buildingFoodProductId0.setFoodProduct((-995));
        BuildingFoodProductId buildingFoodProductId1 = new BuildingFoodProductId();
        boolean boolean0 = buildingFoodProductId0.equals(buildingFoodProductId1);
        assertEquals((-995), buildingFoodProductId0.getFoodProduct());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        BuildingFoodProductId buildingFoodProductId1 = new BuildingFoodProductId(2488, 0);
        boolean boolean0 = buildingFoodProductId1.equals(buildingFoodProductId0);
        assertFalse(boolean0);
        assertEquals(2488, buildingFoodProductId1.getBuilding());
        assertEquals(0, buildingFoodProductId1.getFoodProduct());
        assertFalse(buildingFoodProductId0.equals((Object) buildingFoodProductId1));
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        boolean boolean0 = buildingFoodProductId0.equals(buildingFoodProductId0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId(260, 260);
        int int0 = buildingFoodProductId0.getFoodProduct();
        assertEquals(260, buildingFoodProductId0.getBuilding());
        assertEquals(260, int0);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId((-2274), (-2274));
        int int0 = buildingFoodProductId0.getFoodProduct();
        assertEquals((-2274), buildingFoodProductId0.getBuilding());
        assertEquals((-2274), int0);
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        buildingFoodProductId0.setBuilding(1);
        int int0 = buildingFoodProductId0.getBuilding();
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId((-2047), (-2047));
        int int0 = buildingFoodProductId0.getBuilding();
        assertEquals((-2047), int0);
        assertEquals((-2047), buildingFoodProductId0.getFoodProduct());
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        int int0 = buildingFoodProductId0.getBuilding();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        int int0 = buildingFoodProductId0.getFoodProduct();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        BuildingFoodProductId buildingFoodProductId1 = new BuildingFoodProductId();
        buildingFoodProductId1.setFoodProduct((-1259));
        boolean boolean0 = buildingFoodProductId0.equals(buildingFoodProductId1);
        assertEquals((-1259), buildingFoodProductId1.getFoodProduct());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        BuildingFoodProductId buildingFoodProductId1 = new BuildingFoodProductId();
        buildingFoodProductId1.setBuilding(221);
        boolean boolean0 = buildingFoodProductId0.equals(buildingFoodProductId1);
        assertEquals(221, buildingFoodProductId1.getBuilding());
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        boolean boolean0 = buildingFoodProductId0.equals("");
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId(260, 260);
        boolean boolean0 = buildingFoodProductId0.equals((Object) null);
        assertEquals(260, buildingFoodProductId0.getBuilding());
        assertFalse(boolean0);
        assertEquals(260, buildingFoodProductId0.getFoodProduct());
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        BuildingFoodProductId buildingFoodProductId0 = new BuildingFoodProductId();
        BuildingFoodProductId buildingFoodProductId1 = new BuildingFoodProductId();
        boolean boolean0 = buildingFoodProductId0.equals(buildingFoodProductId1);
        assertTrue(boolean0);
        assertEquals(0, buildingFoodProductId1.getBuilding());
        assertEquals(0, buildingFoodProductId1.getFoodProduct());
    }
}
