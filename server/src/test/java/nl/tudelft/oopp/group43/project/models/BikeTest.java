/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 22:58:32 GMT 2020
 */

package nl.tudelft.oopp.group43.project.models;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;

import java.util.Set;
import nl.tudelft.oopp.group43.project.ViolatedAssumptionAnswer;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BikeTest extends BikeTestScaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        Bike bike0 = new Bike();
        bike0.setBikesAvailable(true);
        boolean boolean0 = bike0.getBikesAvailable();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        Bike bike0 = new Bike();
        Integer integer0 = new Integer(0);
        bike0.setBikeId(integer0);
        Integer integer1 = bike0.getBikeId();
        assertEquals(0, (int) integer1);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        Bike bike0 = new Bike();
        Integer integer0 = new Integer((-646));
        bike0.setBikeId(integer0);
        Integer integer1 = bike0.getBikeId();
        assertEquals((-646), (int) integer1);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        Bike bike0 = new Bike();
        Integer integer0 = new Integer(909);
        bike0.setBikeId(integer0);
        Integer integer1 = bike0.getBikeId();
        assertEquals(909, (int) integer1);
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
        Bike bike0 = new Bike(building0, false);
        boolean boolean0 = bike0.getBikesAvailable();
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test5() throws Throwable {
        Bike bike0 = new Bike();
        bike0.setReservations(null);
        assertNull(bike0.getBikeId());
    }

    @Test(timeout = 4000)
    public void test6() throws Throwable {
        Bike bike0 = new Bike();
        Building building0 = bike0.getBuilding();
        assertNull(building0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        Bike bike0 = new Bike();
        Set<BikeReservation> set0 = bike0.getReservations();
        assertNull(set0);
    }

    @Test(timeout = 4000)
    public void test8() throws Throwable {
        Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
        Bike bike0 = new Bike(building0, false);
        Building building1 = mock(Building.class, new ViolatedAssumptionAnswer());
        bike0.setBuilding(building1);
        assertFalse(bike0.getBikesAvailable());
    }

    @Test(timeout = 4000)
    public void test9() throws Throwable {
        Bike bike0 = new Bike();
        Integer integer0 = bike0.getBikeId();
        assertNull(integer0);
    }
}
