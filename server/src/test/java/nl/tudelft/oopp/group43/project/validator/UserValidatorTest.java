/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:47:07 GMT 2020
 */

package nl.tudelft.oopp.group43.project.validator;

import static org.evosuite.runtime.EvoAssertions.verifyException;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

import nl.tudelft.oopp.group43.project.ViolatedAssumptionAnswer;
import nl.tudelft.oopp.group43.project.models.User;
import nl.tudelft.oopp.group43.project.service.UserService;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.stubbing.Answer;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.validation.Errors;

@RunWith(SpringRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class UserValidatorTest extends UserValidatorTestScaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        UserValidator userValidator0 = new UserValidator();
        UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
        Class<User> class0 = User.class;
        boolean boolean0 = userValidator0.supports(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        boolean boolean0 = UserValidator.isValidEmailAddress("z.qiu@student.tudelft.nl");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        UserValidator userValidator0 = new UserValidator();
        UserService userService0 = mock(UserService.class, (Answer) new ViolatedAssumptionAnswer());

        Errors errors0 = mock(Errors.class, (Answer) new ViolatedAssumptionAnswer());
        doReturn((Object) null).when(errors0).getFieldValue(anyString());
        // Undeclared exception!
        try {
            userValidator0.validate((Object) null, errors0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            verifyException("nl.tudelft.oopp.group43.project.validator.UserValidator", e);
        }
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        UserValidator userValidator0 = new UserValidator();
        UserService userService0 = mock(UserService.class, (Answer) new ViolatedAssumptionAnswer());

        // Undeclared exception!
        try {
            userValidator0.validate((Object) null, (Errors) null);
            fail("Expecting exception: IllegalArgumentException");

        } catch (IllegalArgumentException e) {
            //
            // Errors object must not be null
            //
            verifyException("org.springframework.util.Assert", e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        UserValidator userValidator0 = new UserValidator();
        UserService userService0 = mock(UserService.class, (Answer) new ViolatedAssumptionAnswer());

        Errors errors0 = mock(Errors.class, (Answer) new ViolatedAssumptionAnswer());
        // Undeclared exception!
        try {
            userValidator0.validate("Tu)", errors0);
            fail("Expecting exception: ClassCastException");

        } catch (ClassCastException e) {
            //
            // java.lang.String cannot be cast to nl.tudelft.oopp.group43.project.models.User
            //
            verifyException("nl.tudelft.oopp.group43.project.validator.UserValidator", e);
        }
    }


    @Test(timeout = 4000)
    public void test6() throws Throwable {
        UserValidator userValidator0 = new UserValidator();
        UserService userService0 = mock(UserService.class, (Answer) new ViolatedAssumptionAnswer());
        Class<Class> class0 = Class.class;
        boolean boolean0 = userValidator0.supports(class0);
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test7() throws Throwable {
        boolean boolean0 = UserValidator.isValidEmailAddress("org.springframework.context.support.DefaultMessageSourceResolvable");
        assertFalse(boolean0);
    }
}
