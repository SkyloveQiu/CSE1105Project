/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:48:27 GMT 2020
 */

package nl.tudelft.oopp.group43.project.payload;

import static org.evosuite.shaded.org.mockito.Mockito.doReturn;
import static org.evosuite.shaded.org.mockito.Mockito.mock;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import nl.tudelft.oopp.group43.project.models.BikeReservation;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;

@RunWith(SpringRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class BikeReservationResponse_ESTest extends BikeReservationResponse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      BikeReservationResponse bikeReservationResponse0 = new BikeReservationResponse(bikeReservation0, "", 1);
      assertEquals(1, bikeReservationResponse0.getStatus());
      
      bikeReservationResponse0.setStatus(0);
      int int0 = bikeReservationResponse0.getStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      BikeReservationResponse bikeReservationResponse0 = new BikeReservationResponse(bikeReservation0, "", (-664));
      bikeReservationResponse0.status = 0;
      bikeReservationResponse0.status = 1;
      int int0 = bikeReservationResponse0.getStatus();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BikeReservationResponse bikeReservationResponse0 = new BikeReservationResponse((BikeReservation) null, (String) null, 783);
      bikeReservationResponse0.getMessage();
      assertEquals(783, bikeReservationResponse0.getStatus());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      BikeReservationResponse bikeReservationResponse0 = new BikeReservationResponse(bikeReservation0, "t<e", 2513);
      bikeReservationResponse0.bikeReservation = null;
      bikeReservationResponse0.getBikeReservation();
      assertEquals(2513, bikeReservationResponse0.getStatus());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      BikeReservationResponse bikeReservationResponse0 = new BikeReservationResponse(bikeReservation0, "", (-664));
      String string0 = bikeReservationResponse0.getMessage();
      assertEquals((-664), bikeReservationResponse0.getStatus());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      BikeReservationResponse bikeReservationResponse0 = new BikeReservationResponse(bikeReservation0, "", (-664));
      int int0 = bikeReservationResponse0.getStatus();
      assertEquals((-664), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(bikeReservation0).toString();
      BikeReservationResponse bikeReservationResponse0 = new BikeReservationResponse(bikeReservation0, "", (-664));
      BikeReservation bikeReservation1 = bikeReservationResponse0.getBikeReservation();
      assertEquals((-664), bikeReservationResponse0.getStatus());
      assertNotNull(bikeReservation1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      BikeReservationResponse bikeReservationResponse0 = new BikeReservationResponse(bikeReservation0, "", (-664));
      bikeReservationResponse0.setMessage("[X$wxg<5(<Q9Vr");
      bikeReservationResponse0.getMessage();
      assertEquals("[X$wxg<5(<Q9Vr", bikeReservationResponse0.getMessage());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      BikeReservationResponse bikeReservationResponse0 = new BikeReservationResponse(bikeReservation0, "", (-664));
      BikeReservation bikeReservation1 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      bikeReservationResponse0.setBikeReservation(bikeReservation1);
      assertEquals((-664), bikeReservationResponse0.getStatus());
  }
}
