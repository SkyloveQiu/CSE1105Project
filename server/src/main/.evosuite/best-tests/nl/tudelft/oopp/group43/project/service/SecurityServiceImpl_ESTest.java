/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 23:14:07 GMT 2020
 */

package nl.tudelft.oopp.group43.project.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import nl.tudelft.oopp.group43.project.models.User;
import nl.tudelft.oopp.group43.project.repositories.UserRepository;
import nl.tudelft.oopp.group43.project.service.SecurityServiceImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SecurityServiceImpl_ESTest extends SecurityServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SecurityServiceImpl securityServiceImpl0 = new SecurityServiceImpl();
      Authentication authentication0 = mock(Authentication.class, new ViolatedAssumptionAnswer());
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      doReturn(authentication0).when(authenticationManager0).authenticate(any(org.springframework.security.core.Authentication.class));
      Injector.inject(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class, "authenticationManager", (Object) authenticationManager0);
      UserDetails userDetails0 = mock(UserDetails.class, new ViolatedAssumptionAnswer());
      doReturn((Collection<Object>) null).when(userDetails0).getAuthorities();
      UserDetailsService userDetailsService0 = mock(UserDetailsService.class, new ViolatedAssumptionAnswer());
      doReturn(userDetails0).when(userDetailsService0).loadUserByUsername(anyString());
      Injector.inject(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class, "userDetailsService", (Object) userDetailsService0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).toString();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findByUsername(anyString());
      Injector.inject(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class);
      User user1 = securityServiceImpl0.autoLogin("", (String) null);
      assertNull(user1.getToken());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SecurityServiceImpl securityServiceImpl0 = new SecurityServiceImpl();
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class, "authenticationManager", (Object) authenticationManager0);
      UserDetailsService userDetailsService0 = mock(UserDetailsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class, "userDetailsService", (Object) userDetailsService0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class);
      SecurityContextHolder.setStrategyName("MODE_INHERITABLETHREADLOCAL");
      // Undeclared exception!
      try { 
        securityServiceImpl0.findLoggedInUsername();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.service.SecurityServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SecurityServiceImpl securityServiceImpl0 = new SecurityServiceImpl();
      Authentication authentication0 = mock(Authentication.class, new ViolatedAssumptionAnswer());
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      doReturn(authentication0).when(authenticationManager0).authenticate(any(org.springframework.security.core.Authentication.class));
      Injector.inject(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class, "authenticationManager", (Object) authenticationManager0);
      UserDetails userDetails0 = mock(UserDetails.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(userDetails0).getAuthorities();
      UserDetailsService userDetailsService0 = mock(UserDetailsService.class, new ViolatedAssumptionAnswer());
      doReturn(userDetails0, (UserDetails) null).when(userDetailsService0).loadUserByUsername(anyString());
      Injector.inject(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class, "userDetailsService", (Object) userDetailsService0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).toString();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findByUsername(anyString());
      Injector.inject(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(securityServiceImpl0, (Class<?>) SecurityServiceImpl.class);
      securityServiceImpl0.autoLogin("f$^X!x$8'M[jSv_", "f$^X!x$8'M[jSv_");
      // Undeclared exception!
      try { 
        securityServiceImpl0.autoLogin("MODE_INHERITABLETHREADLOCAL", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.service.SecurityServiceImpl", e);
      }
  }
}
