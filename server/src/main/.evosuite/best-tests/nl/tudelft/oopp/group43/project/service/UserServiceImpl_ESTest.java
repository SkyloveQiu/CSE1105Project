/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 23:13:49 GMT 2020
 */

package nl.tudelft.oopp.group43.project.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import nl.tudelft.oopp.group43.project.models.User;
import nl.tudelft.oopp.group43.project.repositories.RoleRepository;
import nl.tudelft.oopp.group43.project.repositories.UserRepository;
import nl.tudelft.oopp.group43.project.service.UserServiceImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserServiceImpl_ESTest extends UserServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      RoleRepository roleRepository0 = mock(RoleRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "roleRepository", (Object) roleRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userRepository0).findByUsername(anyString());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      User user0 = userServiceImpl0.findByUsername("F@}.[");
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      RoleRepository roleRepository0 = mock(RoleRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "roleRepository", (Object) roleRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userRepository0).findUserByToken(anyString());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      User user0 = userServiceImpl0.findByToken("NwFC`bC;,=.x");
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      RoleRepository roleRepository0 = mock(RoleRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "roleRepository", (Object) roleRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      // Undeclared exception!
      try { 
        userServiceImpl0.save((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.service.UserServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      RoleRepository roleRepository0 = mock(RoleRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "roleRepository", (Object) roleRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("8YOgEL(e#_").when(user0).toString();
      doReturn("?").when(user0).getPassword();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findByUsername(anyString());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      User user1 = userServiceImpl0.findByUsername("");
      // Undeclared exception!
      userServiceImpl0.save(user1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserServiceImpl userServiceImpl0 = new UserServiceImpl();
      RoleRepository roleRepository0 = mock(RoleRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "roleRepository", (Object) roleRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(":\"{G/pVa=q").when(user0).toString();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findUserByToken(anyString());
      Injector.inject(userServiceImpl0, (Class<?>) UserServiceImpl.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(userServiceImpl0, (Class<?>) UserServiceImpl.class);
      User user1 = userServiceImpl0.findByToken("");
      assertSame(user1, user0);
  }
}
