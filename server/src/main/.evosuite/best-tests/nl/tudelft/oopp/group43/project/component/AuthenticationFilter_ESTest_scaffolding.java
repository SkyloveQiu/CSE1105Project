/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Mar 22 21:48:05 GMT 2020
 */

package nl.tudelft.oopp.group43.project.component;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class AuthenticationFilter_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "nl.tudelft.oopp.group43.project.component.AuthenticationFilter"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/bb/jflygsqs62q45k_4jdyk7knm0000gn/T/"); 
    java.lang.System.setProperty("user.country", "CN"); 
    java.lang.System.setProperty("user.dir", "/Users/skylove/CSE1105/repository-template/server/src/main"); 
    java.lang.System.setProperty("user.home", "/Users/skylove"); 
    java.lang.System.setProperty("user.language", "zh"); 
    java.lang.System.setProperty("user.name", "skylove"); 
    java.lang.System.setProperty("user.timezone", "Europe/Amsterdam"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(AuthenticationFilter_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.security.web.authentication.NullRememberMeServices",
      "com.fasterxml.jackson.annotation.JsonProperty",
      "nl.tudelft.oopp.group43.project.models.Role",
      "org.springframework.security.core.userdetails.UsernameNotFoundException",
      "org.springframework.beans.PropertyEditorRegistry",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.apache.commons.lang3.StringUtils",
      "org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl",
      "org.springframework.core.env.PropertyResolver",
      "org.springframework.web.filter.GenericFilterBean",
      "org.springframework.context.ApplicationEventPublisher",
      "org.springframework.beans.TypeConverter",
      "org.springframework.security.core.AuthenticationException",
      "org.springframework.security.web.PortResolverImpl",
      "org.springframework.security.core.context.SecurityContextHolder",
      "org.springframework.security.web.PortResolver",
      "org.springframework.context.support.AbstractResourceBasedMessageSource",
      "org.springframework.util.ClassUtils",
      "com.fasterxml.jackson.annotation.JsonCreator$Mode",
      "org.springframework.security.core.GrantedAuthority",
      "nl.tudelft.oopp.group43.project.models.FoodOrder",
      "org.springframework.security.authentication.AbstractAuthenticationToken",
      "org.springframework.beans.factory.DisposableBean",
      "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
      "org.springframework.beans.PropertyValues",
      "org.springframework.util.ConcurrentReferenceHashMap$Task",
      "org.springframework.security.web.savedrequest.RequestCache",
      "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler",
      "org.springframework.security.web.authentication.RememberMeServices",
      "org.springframework.security.web.DefaultRedirectStrategy",
      "org.springframework.beans.BeanWrapper",
      "org.springframework.security.web.RedirectStrategy",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.security.core.CredentialsContainer",
      "org.springframework.core.env.EnvironmentCapable",
      "org.springframework.lang.Nullable",
      "com.fasterxml.jackson.annotation.JsonProperty$Access",
      "org.springframework.context.MessageSource",
      "org.springframework.util.ConcurrentReferenceHashMap$1",
      "org.springframework.util.ConcurrentReferenceHashMap$2",
      "org.springframework.util.ConcurrentReferenceHashMap$3",
      "org.springframework.util.ConcurrentReferenceHashMap$4",
      "org.springframework.security.authentication.AuthenticationManager",
      "org.springframework.security.core.context.SecurityContextImpl",
      "org.springframework.security.authentication.AuthenticationServiceException",
      "org.springframework.util.ObjectUtils",
      "org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent",
      "org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy",
      "org.springframework.beans.BeansException",
      "org.springframework.context.ApplicationEvent",
      "org.springframework.security.core.SpringSecurityMessageSource",
      "org.springframework.security.web.authentication.AuthenticationFailureHandler",
      "org.springframework.security.web.util.matcher.AnyRequestMatcher",
      "org.springframework.context.HierarchicalMessageSource",
      "org.springframework.context.support.MessageSourceSupport",
      "org.springframework.util.ConcurrentReferenceHashMap$5",
      "org.springframework.security.core.authority.AuthorityUtils",
      "org.springframework.web.context.ServletContextAware",
      "org.springframework.context.NoSuchMessageException",
      "org.springframework.util.ConcurrentReferenceHashMap$Reference",
      "org.springframework.context.support.AbstractMessageSource",
      "org.springframework.security.web.authentication.session.SessionAuthenticationStrategy",
      "org.springframework.security.core.userdetails.UserDetailsService",
      "org.springframework.security.authentication.InternalAuthenticationServiceException",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "com.fasterxml.jackson.annotation.JacksonAnnotation",
      "org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy",
      "org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter",
      "org.springframework.security.web.util.matcher.RequestMatcher$MatchResult",
      "org.springframework.core.NestedRuntimeException",
      "nl.tudelft.oopp.group43.project.models.BikeReservation",
      "org.springframework.core.io.ResourceLoader",
      "org.springframework.security.web.util.matcher.RequestMatcher",
      "nl.tudelft.oopp.group43.project.models.User",
      "org.springframework.security.web.authentication.WebAuthenticationDetailsSource",
      "org.springframework.security.core.context.SecurityContext",
      "org.springframework.core.env.Environment",
      "org.springframework.security.web.savedrequest.HttpSessionRequestCache",
      "org.springframework.security.core.Authentication",
      "org.springframework.beans.factory.BeanClassLoaderAware",
      "nl.tudelft.oopp.group43.project.component.AuthenticationFilter",
      "org.springframework.beans.factory.Aware",
      "org.springframework.security.web.PortMapperImpl",
      "org.springframework.security.web.authentication.AuthenticationSuccessHandler",
      "org.springframework.beans.factory.InitializingBean",
      "org.springframework.beans.PropertyAccessor",
      "org.springframework.security.web.PortMapper",
      "org.springframework.context.support.ResourceBundleMessageSource",
      "org.springframework.web.util.NestedServletException",
      "org.springframework.security.authentication.AuthenticationDetailsSource",
      "org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler",
      "org.springframework.beans.factory.annotation.Qualifier",
      "com.fasterxml.jackson.annotation.JsonIgnore",
      "org.springframework.security.core.userdetails.UserDetails",
      "nl.tudelft.oopp.group43.project.service.UserService",
      "org.springframework.beans.factory.BeanNameAware",
      "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
      "org.springframework.security.core.context.SecurityContextHolderStrategy",
      "org.springframework.context.ApplicationEventPublisherAware",
      "org.springframework.context.MessageSourceAware",
      "org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler",
      "nl.tudelft.oopp.group43.project.models.Reservation",
      "org.springframework.context.EnvironmentAware",
      "org.springframework.context.support.MessageSourceAccessor",
      "com.fasterxml.jackson.annotation.JsonCreator",
      "org.springframework.beans.ConfigurablePropertyAccessor",
      "org.springframework.security.authentication.event.AbstractAuthenticationEvent",
      "org.springframework.util.Assert",
      "org.springframework.util.StringUtils"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("javax.servlet.FilterChain", false, AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.http.HttpServletRequest", false, AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("javax.servlet.http.HttpServletResponse", false, AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("nl.tudelft.oopp.group43.project.models.User", false, AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("nl.tudelft.oopp.group43.project.service.UserService", false, AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.security.authentication.AuthenticationManager", false, AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.security.core.userdetails.UserDetails", false, AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.security.core.userdetails.UserDetailsService", false, AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("org.springframework.security.web.util.matcher.RequestMatcher", false, AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(AuthenticationFilter_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.springframework.web.filter.GenericFilterBean",
      "org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter",
      "nl.tudelft.oopp.group43.project.component.AuthenticationFilter",
      "org.apache.commons.lang3.StringUtils",
      "org.springframework.util.StringUtils",
      "org.springframework.security.core.context.ThreadLocalSecurityContextHolderStrategy",
      "org.springframework.security.core.context.SecurityContextHolder",
      "org.springframework.security.web.authentication.WebAuthenticationDetailsSource",
      "org.springframework.context.support.MessageSourceSupport",
      "org.springframework.context.support.AbstractMessageSource",
      "org.springframework.context.support.AbstractResourceBasedMessageSource",
      "org.springframework.context.support.ResourceBundleMessageSource",
      "org.springframework.security.core.SpringSecurityMessageSource",
      "org.springframework.context.support.MessageSourceAccessor",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceType",
      "org.springframework.util.ConcurrentReferenceHashMap",
      "org.springframework.util.Assert",
      "org.springframework.util.ConcurrentReferenceHashMap$Segment",
      "org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager",
      "org.springframework.util.ClassUtils",
      "org.springframework.context.support.ResourceBundleMessageSource$MessageSourceControl",
      "org.springframework.util.ObjectUtils",
      "org.springframework.security.web.authentication.NullRememberMeServices",
      "org.springframework.security.web.authentication.session.NullAuthenticatedSessionStrategy",
      "org.springframework.security.web.authentication.AbstractAuthenticationTargetUrlRequestHandler",
      "org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler",
      "org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler",
      "org.springframework.security.web.DefaultRedirectStrategy",
      "org.springframework.security.web.savedrequest.HttpSessionRequestCache",
      "org.springframework.security.web.PortResolverImpl",
      "org.springframework.security.web.PortMapperImpl",
      "org.springframework.security.web.util.matcher.AnyRequestMatcher",
      "org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler",
      "com.fasterxml.jackson.annotation.JsonProperty$Access",
      "com.fasterxml.jackson.annotation.JsonCreator$Mode",
      "nl.tudelft.oopp.group43.project.models.User",
      "org.springframework.security.authentication.AbstractAuthenticationToken",
      "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",
      "org.springframework.security.core.AuthenticationException",
      "org.springframework.security.authentication.AuthenticationCredentialsNotFoundException",
      "org.springframework.security.core.context.SecurityContextImpl",
      "org.springframework.security.core.authority.AuthorityUtils",
      "org.springframework.core.env.AbstractEnvironment",
      "org.springframework.core.env.StandardEnvironment",
      "org.springframework.web.context.support.StandardServletEnvironment",
      "org.springframework.core.env.MutablePropertySources",
      "org.springframework.core.env.AbstractPropertyResolver",
      "org.springframework.core.env.PropertySourcesPropertyResolver",
      "org.springframework.core.env.PropertySource",
      "org.springframework.core.env.PropertySource$StubPropertySource",
      "org.springframework.jndi.JndiAccessor",
      "org.springframework.jndi.JndiLocatorSupport",
      "org.springframework.core.SpringProperties",
      "org.springframework.jndi.JndiLocatorDelegate",
      "org.springframework.jndi.JndiPropertySource",
      "org.springframework.jndi.JndiTemplate",
      "org.springframework.core.env.EnumerablePropertySource",
      "org.springframework.core.env.MapPropertySource",
      "org.springframework.core.env.PropertiesPropertySource",
      "org.springframework.core.env.SystemEnvironmentPropertySource",
      "org.springframework.security.web.util.matcher.AntPathRequestMatcher",
      "org.springframework.security.web.util.matcher.AntPathRequestMatcher$SpringAntMatcher",
      "org.springframework.util.AntPathMatcher",
      "org.springframework.util.AntPathMatcher$PathSeparatorPatternCache",
      "org.springframework.util.ReflectionUtils",
      "org.springframework.core.NestedRuntimeException",
      "org.springframework.beans.BeansException"
    );
  }
}
