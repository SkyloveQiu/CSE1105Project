/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sun Mar 22 23:14:07 GMT 2020
 */

package nl.tudelft.oopp.group43.project.service;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class UserDetailsServiceImpl_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "nl.tudelft.oopp.group43.project.service.UserDetailsServiceImpl"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/bb/jflygsqs62q45k_4jdyk7knm0000gn/T/"); 
    java.lang.System.setProperty("user.country", "CN"); 
    java.lang.System.setProperty("user.dir", "/Users/skylove/CSE1105/repository-template/server/src/main"); 
    java.lang.System.setProperty("user.home", "/Users/skylove"); 
    java.lang.System.setProperty("user.language", "zh"); 
    java.lang.System.setProperty("user.name", "skylove"); 
    java.lang.System.setProperty("user.timezone", "Europe/Amsterdam"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(UserDetailsServiceImpl_ESTest_scaffolding.class.getClassLoader() ,
      "org.springframework.beans.factory.HierarchicalBeanFactory",
      "com.fasterxml.jackson.annotation.JsonProperty",
      "nl.tudelft.oopp.group43.project.models.Role",
      "org.springframework.security.core.userdetails.UsernameNotFoundException",
      "org.springframework.security.core.userdetails.UserDetailsService",
      "org.springframework.beans.factory.annotation.Autowired",
      "org.springframework.security.core.userdetails.User",
      "org.springframework.core.type.ClassMetadata",
      "org.springframework.beans.factory.support.BeanDefinitionRegistry",
      "org.springframework.beans.factory.config.ConfigurableListableBeanFactory",
      "com.fasterxml.jackson.annotation.JacksonAnnotation",
      "org.springframework.data.domain.Sort$Direction",
      "org.springframework.data.domain.ExampleMatcher$MatchMode",
      "nl.tudelft.oopp.group43.project.repositories.UserRepository",
      "org.springframework.core.env.PropertyResolver",
      "org.springframework.data.repository.Repository",
      "org.springframework.security.core.AuthenticationException",
      "org.springframework.data.domain.Sort",
      "org.springframework.data.domain.Pageable",
      "org.springframework.stereotype.Repository",
      "org.springframework.context.annotation.ImportSelector",
      "org.springframework.boot.autoconfigure.AutoConfigurationPackages$Registrar",
      "org.springframework.data.domain.ExampleMatcher$GenericPropertyMatcher",
      "org.springframework.boot.autoconfigure.AutoConfigurationImportSelector",
      "nl.tudelft.oopp.group43.project.models.BikeReservation",
      "org.springframework.core.NestedRuntimeException",
      "org.springframework.core.io.ResourceLoader",
      "org.springframework.data.repository.PagingAndSortingRepository",
      "com.fasterxml.jackson.annotation.JsonCreator$Mode",
      "org.springframework.security.core.userdetails.User$UserBuilder",
      "org.springframework.core.type.AnnotationMetadata",
      "org.springframework.data.domain.Page",
      "org.springframework.data.domain.Example",
      "nl.tudelft.oopp.group43.project.models.User",
      "org.springframework.data.domain.Slice",
      "org.springframework.data.domain.Sort$NullHandling",
      "org.springframework.security.core.GrantedAuthority",
      "org.springframework.core.AliasRegistry",
      "nl.tudelft.oopp.group43.project.models.FoodOrder",
      "org.springframework.data.domain.ExampleMatcher$MatcherConfigurer",
      "org.springframework.data.util.Streamable",
      "org.springframework.core.env.Environment",
      "org.springframework.beans.factory.support.BeanNameGenerator",
      "org.springframework.data.domain.ExampleMatcher$StringMatcher",
      "nl.tudelft.oopp.group43.project.models.Building",
      "org.springframework.beans.factory.BeanClassLoaderAware",
      "org.springframework.transaction.annotation.Isolation",
      "nl.tudelft.oopp.group43.project.models.Bike",
      "org.springframework.data.util.MethodInvocationRecorder$Recorded$ToMapConverter",
      "org.springframework.data.jpa.repository.JpaRepository",
      "org.springframework.beans.factory.ListableBeanFactory",
      "org.springframework.boot.autoconfigure.AutoConfigurationImportSelector$AutoConfigurationEntry",
      "org.springframework.core.Ordered",
      "org.springframework.boot.autoconfigure.AutoConfigurationPackage",
      "org.springframework.context.annotation.DeferredImportSelector",
      "org.springframework.beans.factory.Aware",
      "org.springframework.beans.factory.config.AutowireCapableBeanFactory",
      "org.springframework.data.repository.CrudRepository",
      "org.springframework.data.repository.NoRepositoryBean",
      "org.springframework.data.util.MethodInvocationRecorder$Recorded$ToCollectionConverter",
      "org.springframework.data.domain.ExampleMatcher$PropertySpecifiers",
      "org.springframework.security.core.CredentialsContainer",
      "nl.tudelft.oopp.group43.project.service.UserDetailsServiceImpl",
      "org.springframework.context.annotation.ImportBeanDefinitionRegistrar",
      "org.springframework.transaction.annotation.Propagation",
      "org.springframework.stereotype.Service",
      "org.springframework.beans.factory.BeanFactoryAware",
      "com.fasterxml.jackson.annotation.JsonIgnore",
      "org.springframework.security.core.userdetails.UserDetails",
      "org.springframework.stereotype.Indexed",
      "org.springframework.boot.autoconfigure.AutoConfigurationMetadata",
      "com.fasterxml.jackson.annotation.JsonProperty$Access",
      "org.springframework.boot.autoconfigure.EnableAutoConfiguration",
      "org.springframework.beans.factory.config.SingletonBeanRegistry",
      "org.springframework.context.ResourceLoaderAware",
      "org.springframework.context.annotation.Import",
      "org.springframework.beans.BeansException",
      "org.springframework.data.domain.ExampleMatcher",
      "org.springframework.data.domain.Sort$Order",
      "org.springframework.boot.context.annotation.DeterminableImports",
      "org.springframework.data.repository.query.QueryByExampleExecutor",
      "org.springframework.data.domain.ExampleMatcher$PropertyValueTransformer",
      "org.springframework.stereotype.Component",
      "nl.tudelft.oopp.group43.project.models.Reservation",
      "org.springframework.context.EnvironmentAware",
      "org.springframework.beans.factory.BeanFactory",
      "com.fasterxml.jackson.annotation.JsonCreator",
      "org.springframework.data.domain.Sort$TypedSort",
      "org.springframework.core.annotation.AnnotationAttributes",
      "org.springframework.core.type.AnnotatedTypeMetadata",
      "org.springframework.beans.factory.config.ConfigurableBeanFactory",
      "org.springframework.data.domain.ExampleMatcher$NullHandler",
      "org.springframework.util.Assert"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("nl.tudelft.oopp.group43.project.models.User", false, UserDetailsServiceImpl_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("nl.tudelft.oopp.group43.project.repositories.UserRepository", false, UserDetailsServiceImpl_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(UserDetailsServiceImpl_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "nl.tudelft.oopp.group43.project.service.UserDetailsServiceImpl",
      "org.springframework.transaction.annotation.Propagation",
      "org.springframework.transaction.annotation.Isolation",
      "com.fasterxml.jackson.annotation.JsonProperty$Access",
      "com.fasterxml.jackson.annotation.JsonCreator$Mode",
      "nl.tudelft.oopp.group43.project.models.User",
      "org.springframework.security.core.AuthenticationException",
      "org.springframework.security.core.userdetails.UsernameNotFoundException",
      "org.springframework.security.core.userdetails.User"
    );
  }
}
