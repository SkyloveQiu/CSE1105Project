/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:47:13 GMT 2020
 */

package nl.tudelft.oopp.group43.project.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import nl.tudelft.oopp.group43.project.controllers.UserController;
import nl.tudelft.oopp.group43.project.models.User;
import nl.tudelft.oopp.group43.project.repositories.UserRepository;
import nl.tudelft.oopp.group43.project.service.SecurityService;
import nl.tudelft.oopp.group43.project.service.TokenService;
import nl.tudelft.oopp.group43.project.service.UserService;
import nl.tudelft.oopp.group43.project.validator.UserValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserController_ESTest extends UserController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserController userController0 = new UserController();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "repository", (Object) userRepository0);
      SecurityService securityService0 = mock(SecurityService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(securityService0).autoLogin(anyString() , anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "securityService", (Object) securityService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "tokenService", (Object) tokenService0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userService", (Object) userService0);
      UserValidator userValidator0 = mock(UserValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userValidator", (Object) userValidator0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      ResponseEntity<Object> responseEntity0 = userController0.getToken("PG&p+#<b0m", "PG&p+#<b0m");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      UserController userController0 = new UserController();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "repository", (Object) userRepository0);
      SecurityService securityService0 = mock(SecurityService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "securityService", (Object) securityService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "tokenService", (Object) tokenService0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).findByToken(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "userService", (Object) userService0);
      UserValidator userValidator0 = mock(UserValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userValidator", (Object) userValidator0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user0 = userController0.getName("W<eNkCyU#=Yf");
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserController userController0 = new UserController();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "repository", (Object) userRepository0);
      SecurityService securityService0 = mock(SecurityService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "securityService", (Object) securityService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "tokenService", (Object) tokenService0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userService", (Object) userService0);
      UserValidator userValidator0 = mock(UserValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userValidator", (Object) userValidator0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      String string0 = userController0.get();
      assertEquals("ok", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserController userController0 = new UserController();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "repository", (Object) userRepository0);
      SecurityService securityService0 = mock(SecurityService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "securityService", (Object) securityService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "tokenService", (Object) tokenService0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userService", (Object) userService0);
      UserValidator userValidator0 = mock(UserValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userValidator", (Object) userValidator0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.getToken((String) null, "Tj]&F2Nq$pMexM W@~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserController userController0 = new UserController();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "repository", (Object) userRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getFirstName();
      doReturn((String) null).when(user0).getLastName();
      doReturn((String) null).when(user0).getRole();
      doReturn((String) null).when(user0).getToken();
      doReturn((String) null).when(user0).getUsername();
      SecurityService securityService0 = mock(SecurityService.class, new ViolatedAssumptionAnswer());
      doReturn(user0, (User) null).when(securityService0).autoLogin(anyString() , anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "securityService", (Object) securityService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "tokenService", (Object) tokenService0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userService", (Object) userService0);
      UserValidator userValidator0 = mock(UserValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userValidator", (Object) userValidator0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      userController0.getToken("&-= z", "1qf");
      ResponseEntity<Object> responseEntity0 = userController0.getToken("", "");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UserController userController0 = new UserController();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "repository", (Object) userRepository0);
      SecurityService securityService0 = mock(SecurityService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "securityService", (Object) securityService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "tokenService", (Object) tokenService0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("registration fail").when(user0).toString();
      doReturn("").when(user0).getPassword();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userService0).findByToken(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "userService", (Object) userService0);
      UserValidator userValidator0 = mock(UserValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userValidator", (Object) userValidator0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user1 = userController0.getName("[2Wj/27h9]");
      BindingResult bindingResult0 = mock(BindingResult.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(bindingResult0).getAllErrors();
      doReturn(true).when(bindingResult0).hasErrors();
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userController0.registration(user1, bindingResult0, model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.UserController", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UserController userController0 = new UserController();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "repository", (Object) userRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getFirstName();
      doReturn((String) null).when(user0).getLastName();
      doReturn((String) null).when(user0).getRole();
      doReturn((String) null).when(user0).getToken();
      doReturn((String) null).when(user0).getUsername();
      SecurityService securityService0 = mock(SecurityService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(securityService0).autoLogin(anyString() , anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "securityService", (Object) securityService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "tokenService", (Object) tokenService0);
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("").when(user1).toString();
      doReturn("").when(user1).getPassword();
      doReturn("").when(user1).getUsername();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user1).when(userService0).findByToken(anyString());
      Injector.inject(userController0, (Class<?>) UserController.class, "userService", (Object) userService0);
      UserValidator userValidator0 = mock(UserValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userValidator", (Object) userValidator0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      User user2 = userController0.getName("HttpStatus must not be null");
      BindingResult bindingResult0 = mock(BindingResult.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(bindingResult0).hasErrors();
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = userController0.registration(user2, bindingResult0, model0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      UserController userController0 = new UserController();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "repository", (Object) userRepository0);
      SecurityService securityService0 = mock(SecurityService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "securityService", (Object) securityService0);
      TokenService tokenService0 = mock(TokenService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "tokenService", (Object) tokenService0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userService", (Object) userService0);
      UserValidator userValidator0 = mock(UserValidator.class, new ViolatedAssumptionAnswer());
      Injector.inject(userController0, (Class<?>) UserController.class, "userValidator", (Object) userValidator0);
      Injector.validateBean(userController0, (Class<?>) UserController.class);
      // Undeclared exception!
      try { 
        userController0.getToken("V~-AE9#E$q%4oYcw", "V~-AE9#E$q%4oYcw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \"4o\"
         //
         verifyException("java.net.URLDecoder", e);
      }
  }
}
