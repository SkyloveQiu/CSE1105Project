/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 22:57:31 GMT 2020
 */

package nl.tudelft.oopp.group43.project.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Date;
import java.util.Set;
import nl.tudelft.oopp.group43.project.models.Building;
import nl.tudelft.oopp.group43.project.models.FoodOrder;
import nl.tudelft.oopp.group43.project.models.Reservation;
import nl.tudelft.oopp.group43.project.models.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FoodOrder_ESTest extends FoodOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).toString();
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      FoodOrder foodOrder0 = new FoodOrder(building0, (Reservation) null, user0, date0, (Set) null);
      foodOrder0.getUser();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(date0).toString();
      FoodOrder foodOrder0 = new FoodOrder(building0, reservation0, user0, date0);
      foodOrder0.getTime();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(reservation0).toString();
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      FoodOrder foodOrder0 = new FoodOrder(building0, reservation0, user0, (Date) null);
      foodOrder0.getReservation();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      Integer integer0 = new Integer(0);
      foodOrder0.setId(integer0);
      foodOrder0.getId();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      Integer integer0 = new Integer(3336);
      foodOrder0.setId(integer0);
      foodOrder0.getId();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      Integer integer0 = new Integer((-1));
      foodOrder0.setId(integer0);
      foodOrder0.getId();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      foodOrder0.setBuilding((Building) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      foodOrder0.getId();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      foodOrder0.getTime();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      Set<FoodOrder> set0 = foodOrder0.getFoodOrderDetails();
      foodOrder0.setFoodOrderDetails(set0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      foodOrder0.getUser();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      foodOrder0.setReservation((Reservation) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      FoodOrder foodOrder0 = new FoodOrder(building0, reservation0, user0, date0);
      foodOrder0.setFoodOrderDetails((Set) null);
      foodOrder0.getFoodOrderDetails();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      foodOrder0.setTime((Date) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      foodOrder0.setUser((User) null);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      foodOrder0.getReservation();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FoodOrder foodOrder0 = new FoodOrder();
      foodOrder0.getBuilding();
  }
}
