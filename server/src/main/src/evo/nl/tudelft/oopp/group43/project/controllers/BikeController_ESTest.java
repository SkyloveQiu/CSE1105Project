/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:45:53 GMT 2020
 */

package nl.tudelft.oopp.group43.project.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import nl.tudelft.oopp.group43.project.controllers.BikeController;
import nl.tudelft.oopp.group43.project.models.Bike;
import nl.tudelft.oopp.group43.project.models.BikeReservation;
import nl.tudelft.oopp.group43.project.models.Building;
import nl.tudelft.oopp.group43.project.models.User;
import nl.tudelft.oopp.group43.project.repositories.BikeRepository;
import nl.tudelft.oopp.group43.project.repositories.BikeReservationRepository;
import nl.tudelft.oopp.group43.project.repositories.BuildingRepository;
import nl.tudelft.oopp.group43.project.repositories.UserRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BikeController_ESTest extends BikeController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Building) null).when(buildingRepository0).findBuildingByBuildingNumber(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("oq%(&NFUjUH4").when(user0).getToken();
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(bikeReservation0).getUser();
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bikeReservation0).when(bikeReservationRepository0).findBybikeReservationId(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      ResponseEntity<Object> responseEntity0 = bikeController0.closeReservation(0, "oq%(&NFUjUH4", (-3301));
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("org.springframework.util.Assert").when(user0).getToken();
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(bikeReservation0).getUser();
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bikeReservation0).when(bikeReservationRepository0).findBybikeReservationId(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      ResponseEntity<Object> responseEntity0 = bikeController0.closeReservation(0, "creating fail", (-3301));
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(bike0).getBikesAvailable();
      doReturn((Building) null).when(bike0).getBuilding();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bike0).when(bikeRepository0).findBikeBybikeId(anyInt());
      doReturn((Object) null).when(bikeRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bikeReservationRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(date0).before(any(java.util.Date.class));
      ResponseEntity<Object> responseEntity0 = bikeController0.createReservationWithTime(1, "", date0);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(bike0).getBikesAvailable();
      doReturn((Building) null).when(bike0).getBuilding();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bike0).when(bikeRepository0).findBikeBybikeId(anyInt());
      doReturn((Object) null).when(bikeRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bikeReservationRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      ResponseEntity<Object> responseEntity0 = bikeController0.createReservation(51, "org.springframework.util.LinkedCaseInsensitiveMap$EntrySet");
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bikeRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(building0).when(buildingRepository0).findBuildingByBuildingNumber(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("").when(user0).getToken();
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      doReturn(bike0).when(bikeReservation0).getBike();
      doReturn(user0).when(bikeReservation0).getUser();
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bikeReservation0).when(bikeReservationRepository0).findBybikeReservationId(anyInt());
      doReturn((Object) null).when(bikeReservationRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      ResponseEntity<Object> responseEntity0 = bikeController0.closeReservation(711, "", 711);
      assertEquals(200, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      Bike bike1 = mock(Bike.class, new ViolatedAssumptionAnswer());
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(bikeRepository0).findBikesByBuilding(any(nl.tudelft.oopp.group43.project.models.Building.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(building0).when(buildingRepository0).findBuildingByBuildingNumber(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      List<Bike> list0 = bikeController0.getBike(0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      boolean boolean0 = true;
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      Bike bike1 = mock(Bike.class, new ViolatedAssumptionAnswer());
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(bikeReservationRepository0).findByUser(any(nl.tudelft.oopp.group43.project.models.User.class));
      doReturn((BikeReservation) null).when(bikeReservationRepository0).findBybikeReservationId(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user1).getFirstName();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user1).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      bikeController0.closeReservation((-1), "", (-1));
      int int0 = 300;
      // Undeclared exception!
      try { 
        bikeController0.findUserReservations("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.BikeController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Bike) null).when(bikeRepository0).findBikeBybikeId(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        bikeController0.createReservationWithTime((-2068217709), "NOT_IMPLEMENTED", date0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.BikeController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      // Undeclared exception!
      try { 
        bikeController0.createReservation(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.BikeController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      // Undeclared exception!
      try { 
        bikeController0.createBike(3031, "0)=H#s&[tgabA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.BikeController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bikeRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(building0).when(buildingRepository0).findBuildingByBuildingNumber(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("").when(user0).getRole();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      bikeController0.createBike(38, "9\"_Tu2DN?");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(building0).when(buildingRepository0).findBuildingByBuildingNumber(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("").when(user0).getToken();
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      doReturn((Bike) null).when(bikeReservation0).getBike();
      doReturn(user0).when(bikeReservation0).getUser();
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bikeReservation0).when(bikeReservationRepository0).findBybikeReservationId(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      // Undeclared exception!
      try { 
        bikeController0.closeReservation(711, "", 711);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.BikeController", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      Bike bike1 = mock(Bike.class, new ViolatedAssumptionAnswer());
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Building) null).when(buildingRepository0).findBuildingByBuildingNumber(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("").when(user0).getToken();
      BikeReservation bikeReservation0 = mock(BikeReservation.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(bikeReservation0).getUser();
      Bike bike2 = mock(Bike.class, new ViolatedAssumptionAnswer());
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bikeReservation0).when(bikeReservationRepository0).findBybikeReservationId(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      bikeController0.closeReservation(711, "", 711);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(bike0).getBikesAvailable();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bike0).when(bikeRepository0).findBikeBybikeId(anyInt());
      doReturn((Object) null).when(bikeRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(date0).before(any(java.util.Date.class));
      ResponseEntity<Object> responseEntity0 = bikeController0.createReservationWithTime(1, "", date0);
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(bike0).getBikesAvailable();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bike0).when(bikeRepository0).findBikeBybikeId(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      ResponseEntity<Object> responseEntity0 = bikeController0.createReservationWithTime((-1906), ">/Nqd]*wH", date0);
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(bike0).getBikesAvailable();
      doReturn((Building) null).when(bike0).getBuilding();
      Bike bike1 = mock(Bike.class, new ViolatedAssumptionAnswer());
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bike0).when(bikeRepository0).findBikeBybikeId(anyInt());
      doReturn((Object) null).when(bikeRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bikeReservationRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(date0).before(any(java.util.Date.class));
      bikeController0.createReservationWithTime(300, (String) null, date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(bike0).getBikesAvailable();
      doReturn((Building) null).when(bike0).getBuilding();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bike0).when(bikeRepository0).findBikeBybikeId(anyInt());
      doReturn((Object) null).when(bikeRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(bikeReservationRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      bikeController0.createReservation((-2729), "create success");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Bike) null).when(bikeRepository0).findBikeBybikeId(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      ResponseEntity responseEntity0 = bikeController0.createReservation(1, "");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      Bike bike0 = mock(Bike.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(bike0).getBikesAvailable();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      doReturn(bike0).when(bikeRepository0).findBikeBybikeId(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      ResponseEntity<Object> responseEntity0 = bikeController0.createReservation(0, "D2ajFVbPCKC");
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Building) null).when(buildingRepository0).findBuildingByBuildingNumber(anyInt());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("REQUEST_TIMEOUT").when(user0).getRole();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      ResponseEntity<Object> responseEntity0 = bikeController0.createBike(3031, "0)=H#s&[tgabA");
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BikeController bikeController0 = new BikeController();
      BikeRepository bikeRepository0 = mock(BikeRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "bikeRepository", (Object) bikeRepository0);
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "buildingRepository", (Object) buildingRepository0);
      BikeReservationRepository bikeReservationRepository0 = mock(BikeReservationRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "reservationRepository", (Object) bikeReservationRepository0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("admin").when(user0).getRole();
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userRepository0).findUserByToken(anyString());
      Injector.inject(bikeController0, (Class<?>) BikeController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(bikeController0, (Class<?>) BikeController.class);
      ResponseEntity<Object> responseEntity0 = bikeController0.createBike((-1372), "l>sA yCL[q0.bM1;_f");
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }
}
