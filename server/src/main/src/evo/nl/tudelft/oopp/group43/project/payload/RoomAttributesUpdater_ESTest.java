/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:45:42 GMT 2020
 */

package nl.tudelft.oopp.group43.project.payload;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.NoSuchElementException;
import nl.tudelft.oopp.group43.project.models.Room;
import nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater;
import nl.tudelft.oopp.group43.project.repositories.RoomRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.FalsePositiveException;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.boot.context.event.ApplicationReadyEvent;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RoomAttributesUpdater_ESTest extends RoomAttributesUpdater_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RoomAttributesUpdater.BucketsList roomAttributesUpdater_BucketsList0 = null;
      try {
        roomAttributesUpdater_BucketsList0 = new RoomAttributesUpdater.BucketsList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      RoomRepository roomRepository0 = roomAttributesUpdater0.getRoomRepository();
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      try { 
        Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
        fail("Expecting exception: FalsePositiveException");
      
      } catch(FalsePositiveException e) {
         //
         // Missing dependency injection for field roomRepository in class nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater
         //
         verifyException("org.evosuite.runtime.javaee.injection.Injector", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List<Room>) null).when(roomRepository0).findAll();
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      // Undeclared exception!
      try { 
        roomAttributesUpdater0.update();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        RoomAttributesUpdater.list_higher_than((-2014));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      List<Room> list0 = RoomAttributesUpdater.getRooms();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(list0).when(roomRepository0).findAll();
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      // Undeclared exception!
      try { 
        roomAttributesUpdater0.update();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      List<Integer> list0 = RoomAttributesUpdater.getRoomSeats();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      RoomAttributesUpdater.BucketsList roomAttributesUpdater_BucketsList0 = RoomAttributesUpdater.getRoomList();
      assertNull(roomAttributesUpdater_BucketsList0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      RoomAttributesUpdater.getTableRooms();
      RoomAttributesUpdater.getRoomList();
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(roomRepository0).findAll();
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      ApplicationReadyEvent applicationReadyEvent0 = mock(ApplicationReadyEvent.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        roomAttributesUpdater0.onApplicationReady(applicationReadyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      boolean boolean0 = RoomAttributesUpdater.isRunning();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(roomRepository0).findAll();
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      // Undeclared exception!
      try { 
        roomAttributesUpdater0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater", e);
      }
  }
}
