/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:50:04 GMT 2020
 */

package nl.tudelft.oopp.group43.project.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.util.List;
import nl.tudelft.oopp.group43.project.controllers.BuildingFoodProductController;
import nl.tudelft.oopp.group43.project.models.Building;
import nl.tudelft.oopp.group43.project.models.BuildingFoodProduct;
import nl.tudelft.oopp.group43.project.models.FoodProduct;
import nl.tudelft.oopp.group43.project.repositories.BuildingFoodProductRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BuildingFoodProductController_ESTest extends BuildingFoodProductController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuildingFoodProductController buildingFoodProductController0 = new BuildingFoodProductController();
      BuildingFoodProductRepository buildingFoodProductRepository0 = mock(BuildingFoodProductRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(buildingFoodProductRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(buildingFoodProductController0, (Class<?>) BuildingFoodProductController.class, "repository", (Object) buildingFoodProductRepository0);
      Injector.validateBean(buildingFoodProductController0, (Class<?>) BuildingFoodProductController.class);
      // Undeclared exception!
      try { 
        buildingFoodProductController0.createNewBuildingFoodProduct((BuildingFoodProduct) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.BuildingFoodProductController", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuildingFoodProductController buildingFoodProductController0 = new BuildingFoodProductController();
      BuildingFoodProductRepository buildingFoodProductRepository0 = mock(BuildingFoodProductRepository.class, new ViolatedAssumptionAnswer());
      doReturn("ShOzl0wv9]e4[").when(buildingFoodProductRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(buildingFoodProductController0, (Class<?>) BuildingFoodProductController.class, "repository", (Object) buildingFoodProductRepository0);
      Injector.validateBean(buildingFoodProductController0, (Class<?>) BuildingFoodProductController.class);
      BuildingFoodProduct buildingFoodProduct0 = mock(BuildingFoodProduct.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        buildingFoodProductController0.createNewBuildingFoodProduct(buildingFoodProduct0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to nl.tudelft.oopp.group43.project.models.BuildingFoodProduct
         //
         verifyException("nl.tudelft.oopp.group43.project.repositories.BuildingFoodProductRepository$MockitoMock$136587224", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuildingFoodProductController buildingFoodProductController0 = new BuildingFoodProductController();
      BuildingFoodProductRepository buildingFoodProductRepository0 = mock(BuildingFoodProductRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(buildingFoodProductRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(buildingFoodProductController0, (Class<?>) BuildingFoodProductController.class, "repository", (Object) buildingFoodProductRepository0);
      Injector.validateBean(buildingFoodProductController0, (Class<?>) BuildingFoodProductController.class);
      BuildingFoodProduct buildingFoodProduct0 = mock(BuildingFoodProduct.class, new ViolatedAssumptionAnswer());
      doReturn((Building) null).when(buildingFoodProduct0).getBuilding();
      doReturn((FoodProduct) null).when(buildingFoodProduct0).getFoodProduct();
      doReturn((BigDecimal) null).when(buildingFoodProduct0).getPrice();
      String string0 = buildingFoodProductController0.createNewBuildingFoodProduct(buildingFoodProduct0);
      assertEquals("NEW BUILDING FOOD PRODUCT FOR BUILDING: null PRICE: null FOOD PRODUCT: null", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BuildingFoodProductController buildingFoodProductController0 = new BuildingFoodProductController();
      BuildingFoodProductRepository buildingFoodProductRepository0 = mock(BuildingFoodProductRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(buildingFoodProductRepository0).findAll();
      Injector.inject(buildingFoodProductController0, (Class<?>) BuildingFoodProductController.class, "repository", (Object) buildingFoodProductRepository0);
      Injector.validateBean(buildingFoodProductController0, (Class<?>) BuildingFoodProductController.class);
      List<BuildingFoodProduct> list0 = buildingFoodProductController0.getBuildingFoodProduct();
      assertNull(list0);
  }
}
