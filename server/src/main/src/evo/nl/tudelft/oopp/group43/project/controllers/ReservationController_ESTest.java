/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:45:49 GMT 2020
 */

package nl.tudelft.oopp.group43.project.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import nl.tudelft.oopp.group43.project.controllers.ReservationController;
import nl.tudelft.oopp.group43.project.models.Reservation;
import nl.tudelft.oopp.group43.project.models.User;
import nl.tudelft.oopp.group43.project.repositories.ReservationRepository;
import nl.tudelft.oopp.group43.project.repositories.RoomRepository;
import nl.tudelft.oopp.group43.project.repositories.UserRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.http.ResponseEntity;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReservationController_ESTest extends ReservationController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(reservationRepository0).existsReservationByStartingDateAndAndEndDateAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(roomRepository0).existsRoomById(anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Integer integer0 = new Integer((-521));
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(date0).getMinutes();
      doReturn(0).when(date0).getSeconds();
      doReturn(0L, (-2524L)).when(date0).getTime();
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-521)).when(date1).compareTo(any(java.util.Date.class));
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      doReturn(date1, date1, date0).when(reservation0).getEndDate();
      doReturn(integer0, (Integer) null).when(reservation0).getRoomId();
      doReturn(date1, date1, date0, (Date) null, (Date) null).when(reservation0).getStartingDate();
      ResponseEntity<Object> responseEntity0 = reservationController0.createBuildingReservation(reservation0, "'");
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(reservationRepository0).existsReservationByStartingDateAndAndEndDateAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(date0).compareTo(any(java.util.Date.class));
      Integer integer0 = new Integer(1357);
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      doReturn(date0, date0).when(reservation0).getEndDate();
      doReturn(integer0).when(reservation0).getRoomId();
      doReturn(date0, date0, (Date) null).when(reservation0).getStartingDate();
      try { 
        reservationController0.createBuildingReservation(reservation0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(reservationRepository0).findByUser(any(nl.tudelft.oopp.group43.project.models.User.class));
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      List<Reservation> list0 = reservationController0.getReservationsByUser("");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(reservationRepository0).findByStartingDateGreaterThanEqualAndEndDateLessThanEqualAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      List<Reservation> list0 = reservationController0.getReservationsByUser(634, date0, date1);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(reservationRepository0).findAll();
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      List<Reservation> list0 = reservationController0.getReservation();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        reservationController0.getReservation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(reservationRepository0).existsReservationByStartingDateAndAndEndDateAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1524));
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-1721)).when(date1).compareTo(any(java.util.Date.class));
      Date date2 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((long)(-1721)).when(date2).getTime();
      Date date3 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(date3).getMinutes();
      doReturn(1879).when(date3).getSeconds();
      doReturn((long)0).when(date3).getTime();
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      doReturn(date0, date0, date2).when(reservation0).getEndDate();
      doReturn(integer0).when(reservation0).getRoomId();
      doReturn(date0, date1, date3, date3, date3).when(reservation0).getStartingDate();
      ResponseEntity<Object> responseEntity0 = reservationController0.createBuildingReservation(reservation0, "LOOP_DETECTED");
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(reservationRepository0).existsReservationByStartingDateAndAndEndDateAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(roomRepository0).existsRoomById(anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-5497)).when(date0).compareTo(any(java.util.Date.class));
      Integer integer0 = new Integer((-5497));
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(date1).getMinutes();
      doReturn(0).when(date1).getSeconds();
      doReturn((-1481L), 1L).when(date1).getTime();
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      doReturn(date0, date0, date1).when(reservation0).getEndDate();
      doReturn(integer0, (Integer) null).when(reservation0).getRoomId();
      doReturn(date0, date0, date1, (Date) null, (Date) null).when(reservation0).getStartingDate();
      ResponseEntity<Object> responseEntity0 = reservationController0.createBuildingReservation(reservation0, (String) null);
      assertTrue(responseEntity0.hasBody());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(reservationRepository0).existsReservationByStartingDateAndAndEndDateAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      doReturn((List) null).when(reservationRepository0).findByStartingDateGreaterThanEqualAndEndDateLessThanEqualAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      reservationController0.getReservationsByUser((-721), date1, date1);
      Integer integer0 = new Integer((-1436));
      Date date2 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(date2).compareTo(any(java.util.Date.class));
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      doReturn(date0, date0).when(reservation0).getEndDate();
      doReturn(integer0).when(reservation0).getRoomId();
      doReturn(date2, date2, (Date) null).when(reservation0).getStartingDate();
      try { 
        reservationController0.createBuildingReservation(reservation0, "SLOT IS NOT ONE HOUR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(reservationRepository0).existsReservationByStartingDateAndAndEndDateAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      doReturn((List) null).when(reservationRepository0).findByStartingDateGreaterThanEqualAndEndDateLessThanEqualAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(roomRepository0).existsRoomById(anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(date0).getTime();
      Integer integer0 = new Integer((-1524));
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-1524)).when(date1).compareTo(any(java.util.Date.class));
      Integer integer1 = new Integer(1);
      Date date2 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(date2).getMinutes();
      doReturn(0).when(date2).getSeconds();
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      doReturn(date1, date1, date0).when(reservation0).getEndDate();
      doReturn(integer0, (Integer) null).when(reservation0).getRoomId();
      doReturn(date1, date1, date0, date2, (Date) null).when(reservation0).getStartingDate();
      reservationController0.createBuildingReservation(reservation0, (String) null);
      Date date3 = mock(Date.class, new ViolatedAssumptionAnswer());
      reservationController0.getReservationsByUser((-2337), date3, date3);
      Reservation reservation1 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(reservation1).getEndDate();
      doReturn((Integer) null).when(reservation1).getRoomId();
      doReturn((Date) null).when(reservation1).getStartingDate();
      try { 
        reservationController0.createBuildingReservation(reservation1, "LOOP_DETECTED");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.ReservationController", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReservationController reservationController0 = new ReservationController();
      ReservationRepository reservationRepository0 = mock(ReservationRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(reservationRepository0).existsReservationByStartingDateAndAndEndDateAndRoomId(any(java.util.Date.class) , any(java.util.Date.class) , anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "repository", (Object) reservationRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(roomRepository0).existsRoomById(anyInt());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "roomRepository", (Object) roomRepository0);
      UserRepository userRepository0 = mock(UserRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(userRepository0).existsUserByUsername(anyString());
      Injector.inject(reservationController0, (Class<?>) ReservationController.class, "userRepository", (Object) userRepository0);
      Injector.validateBean(reservationController0, (Class<?>) ReservationController.class);
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(date0).getSeconds();
      doReturn(0L, 0L).when(date0).getTime();
      Integer integer0 = new Integer(501);
      Date date1 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(date1).getMinutes();
      Date date2 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn((-5497)).when(date2).compareTo(any(java.util.Date.class));
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getUsername();
      Reservation reservation0 = mock(Reservation.class, new ViolatedAssumptionAnswer());
      doReturn(date2, date2, date0).when(reservation0).getEndDate();
      doReturn(integer0, integer0).when(reservation0).getRoomId();
      doReturn(date2, date2, date0, date1, date0).when(reservation0).getStartingDate();
      doReturn(user0).when(reservation0).getUser();
      ResponseEntity responseEntity0 = reservationController0.createBuildingReservation(reservation0, "");
      assertEquals(403, responseEntity0.getStatusCodeValue());
  }
}
