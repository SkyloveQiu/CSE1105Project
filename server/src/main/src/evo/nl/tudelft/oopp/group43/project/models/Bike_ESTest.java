/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 22:58:32 GMT 2020
 */

package nl.tudelft.oopp.group43.project.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.util.Set;
import nl.tudelft.oopp.group43.project.models.Bike;
import nl.tudelft.oopp.group43.project.models.BikeReservation;
import nl.tudelft.oopp.group43.project.models.Building;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Bike_ESTest extends Bike_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Bike bike0 = new Bike();
      bike0.setBikesAvailable(true);
      boolean boolean0 = bike0.getBikesAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Bike bike0 = new Bike();
      Integer integer0 = new Integer(0);
      bike0.setBikeId(integer0);
      Integer integer1 = bike0.getBikeId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Bike bike0 = new Bike();
      Integer integer0 = new Integer((-646));
      bike0.setBikeId(integer0);
      Integer integer1 = bike0.getBikeId();
      assertEquals((-646), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Bike bike0 = new Bike();
      Integer integer0 = new Integer(909);
      bike0.setBikeId(integer0);
      Integer integer1 = bike0.getBikeId();
      assertEquals(909, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      Bike bike0 = new Bike(building0, false);
      boolean boolean0 = bike0.getBikesAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Bike bike0 = new Bike();
      bike0.setReservations((Set) null);
      assertNull(bike0.getBikeId());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Bike bike0 = new Bike();
      Building building0 = bike0.getBuilding();
      assertNull(building0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Bike bike0 = new Bike();
      Set<BikeReservation> set0 = bike0.getReservations();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      Bike bike0 = new Bike(building0, false);
      Building building1 = mock(Building.class, new ViolatedAssumptionAnswer());
      bike0.setBuilding(building1);
      assertFalse(bike0.getBikesAvailable());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Bike bike0 = new Bike();
      Integer integer0 = bike0.getBikeId();
      assertNull(integer0);
  }
}
