/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:49:37 GMT 2020
 */

package nl.tudelft.oopp.group43.project.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import nl.tudelft.oopp.group43.project.controllers.FoodProductController;
import nl.tudelft.oopp.group43.project.models.FoodProduct;
import nl.tudelft.oopp.group43.project.repositories.FoodProductRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FoodProductController_ESTest extends FoodProductController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FoodProductController foodProductController0 = new FoodProductController();
      FoodProductRepository foodProductRepository0 = mock(FoodProductRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(foodProductRepository0).findAll();
      Injector.inject(foodProductController0, (Class<?>) FoodProductController.class, "repository", (Object) foodProductRepository0);
      Injector.validateBean(foodProductController0, (Class<?>) FoodProductController.class);
      List<FoodProduct> list0 = foodProductController0.getFoodProduct();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FoodProductController foodProductController0 = new FoodProductController();
      FoodProductRepository foodProductRepository0 = mock(FoodProductRepository.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        foodProductController0.getFoodProduct();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.FoodProductController", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FoodProductController foodProductController0 = new FoodProductController();
      FoodProductRepository foodProductRepository0 = mock(FoodProductRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(foodProductRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(foodProductController0, (Class<?>) FoodProductController.class, "repository", (Object) foodProductRepository0);
      Injector.validateBean(foodProductController0, (Class<?>) FoodProductController.class);
      // Undeclared exception!
      try { 
        foodProductController0.createFoodProduct((FoodProduct) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.FoodProductController", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FoodProductController foodProductController0 = new FoodProductController();
      FoodProductRepository foodProductRepository0 = mock(FoodProductRepository.class, new ViolatedAssumptionAnswer());
      doReturn("").when(foodProductRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(foodProductController0, (Class<?>) FoodProductController.class, "repository", (Object) foodProductRepository0);
      Injector.validateBean(foodProductController0, (Class<?>) FoodProductController.class);
      FoodProduct foodProduct0 = mock(FoodProduct.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        foodProductController0.createFoodProduct(foodProduct0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to nl.tudelft.oopp.group43.project.models.FoodProduct
         //
         verifyException("nl.tudelft.oopp.group43.project.repositories.FoodProductRepository$MockitoMock$1708882451", e);
      }
  }
}
