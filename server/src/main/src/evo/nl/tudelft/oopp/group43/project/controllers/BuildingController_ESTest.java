/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:48:00 GMT 2020
 */

package nl.tudelft.oopp.group43.project.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import nl.tudelft.oopp.group43.project.controllers.BuildingController;
import nl.tudelft.oopp.group43.project.models.Building;
import nl.tudelft.oopp.group43.project.repositories.BuildingRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BuildingController_ESTest extends BuildingController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BuildingController buildingController0 = new BuildingController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(buildingRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(buildingController0, (Class<?>) BuildingController.class, "repository", (Object) buildingRepository0);
      Injector.validateBean(buildingController0, (Class<?>) BuildingController.class);
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(building0).getBuildingName();
      String string0 = buildingController0.updateBuilding(building0);
      assertEquals("UPDATED BUILDING: null", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BuildingController buildingController0 = new BuildingController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(buildingRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(buildingController0, (Class<?>) BuildingController.class, "repository", (Object) buildingRepository0);
      Injector.validateBean(buildingController0, (Class<?>) BuildingController.class);
      // Undeclared exception!
      try { 
        buildingController0.updateBuilding((Building) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.BuildingController", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuildingController buildingController0 = new BuildingController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(buildingController0, (Class<?>) BuildingController.class, "repository", (Object) buildingRepository0);
      Injector.validateBean(buildingController0, (Class<?>) BuildingController.class);
      // Undeclared exception!
      try { 
        buildingController0.createBuilding((Building) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.BuildingController", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BuildingController buildingController0 = new BuildingController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(buildingRepository0).existsBuildingByBuildingNumber(anyInt());
      doReturn((Object) null).when(buildingRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(buildingController0, (Class<?>) BuildingController.class, "repository", (Object) buildingRepository0);
      Injector.validateBean(buildingController0, (Class<?>) BuildingController.class);
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(building0).getBuildingName();
      doReturn((-178)).when(building0).getBuildingNumber();
      buildingController0.createBuilding(building0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BuildingController buildingController0 = new BuildingController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(buildingRepository0).existsBuildingByBuildingNumber(anyInt());
      Injector.inject(buildingController0, (Class<?>) BuildingController.class, "repository", (Object) buildingRepository0);
      Injector.validateBean(buildingController0, (Class<?>) BuildingController.class);
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(building0).getBuildingNumber();
      String string0 = buildingController0.createBuilding(building0);
      assertEquals("BUILDING WITH NUMBER: 0 ALREADY EXISTS.", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BuildingController buildingController0 = new BuildingController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(buildingRepository0).existsBuildingByBuildingNumber(anyInt());
      doReturn((Object) null).when(buildingRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(buildingController0, (Class<?>) BuildingController.class, "repository", (Object) buildingRepository0);
      Injector.validateBean(buildingController0, (Class<?>) BuildingController.class);
      Building building0 = mock(Building.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(building0).getBuildingName();
      doReturn(0).when(building0).getBuildingNumber();
      String string0 = buildingController0.createBuilding(building0);
      assertEquals("NEW BUILDING: null", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BuildingController buildingController0 = new BuildingController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(buildingRepository0).findAll();
      Injector.inject(buildingController0, (Class<?>) BuildingController.class, "repository", (Object) buildingRepository0);
      Injector.validateBean(buildingController0, (Class<?>) BuildingController.class);
      List<Building> list0 = buildingController0.getBuilding();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BuildingController buildingController0 = new BuildingController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(buildingController0, (Class<?>) BuildingController.class, "repository", (Object) buildingRepository0);
      Injector.validateBean(buildingController0, (Class<?>) BuildingController.class);
      buildingController0.removeBuilding(0);
  }
}
