/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:46:13 GMT 2020
 */

package nl.tudelft.oopp.group43.project.keys;

import org.junit.Test;
import static org.junit.Assert.*;
import nl.tudelft.oopp.group43.project.keys.BuildingFoodProductKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BuildingFoodProductKey_ESTest extends BuildingFoodProductKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey((-957), 851);
      BuildingFoodProductKey buildingFoodProductKey1 = new BuildingFoodProductKey((-957), (-957));
      boolean boolean0 = buildingFoodProductKey0.equals(buildingFoodProductKey1);
      assertFalse(buildingFoodProductKey1.equals((Object)buildingFoodProductKey0));
      assertEquals((-957), buildingFoodProductKey0.getBuilding());
      assertEquals(851, buildingFoodProductKey0.getFoodProduct());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey((-1512), 0);
      BuildingFoodProductKey buildingFoodProductKey1 = new BuildingFoodProductKey();
      boolean boolean0 = buildingFoodProductKey0.equals(buildingFoodProductKey1);
      assertFalse(buildingFoodProductKey1.equals((Object)buildingFoodProductKey0));
      assertEquals((-1512), buildingFoodProductKey0.getBuilding());
      assertFalse(boolean0);
      assertEquals(0, buildingFoodProductKey0.getFoodProduct());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey();
      buildingFoodProductKey0.foodProduct = 0;
      buildingFoodProductKey0.foodProduct = 456;
      int int0 = buildingFoodProductKey0.getFoodProduct();
      assertEquals(456, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey(0, (-1446));
      int int0 = buildingFoodProductKey0.getFoodProduct();
      assertEquals(0, buildingFoodProductKey0.getBuilding());
      assertEquals((-1446), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey();
      buildingFoodProductKey0.building = (-1271);
      int int0 = buildingFoodProductKey0.getBuilding();
      assertEquals((-1271), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey();
      int int0 = buildingFoodProductKey0.getBuilding();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey();
      int int0 = buildingFoodProductKey0.getFoodProduct();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey(0, (-1446));
      BuildingFoodProductKey buildingFoodProductKey1 = new BuildingFoodProductKey();
      boolean boolean0 = buildingFoodProductKey0.equals(buildingFoodProductKey1);
      assertEquals(0, buildingFoodProductKey0.getBuilding());
      assertFalse(buildingFoodProductKey1.equals((Object)buildingFoodProductKey0));
      assertFalse(boolean0);
      assertEquals((-1446), buildingFoodProductKey0.getFoodProduct());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey();
      buildingFoodProductKey0.building = (-1271);
      BuildingFoodProductKey buildingFoodProductKey1 = new BuildingFoodProductKey((-1271), 0);
      boolean boolean0 = buildingFoodProductKey0.equals(buildingFoodProductKey1);
      assertEquals((-1271), buildingFoodProductKey0.getBuilding());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey();
      BuildingFoodProductKey buildingFoodProductKey1 = new BuildingFoodProductKey((-1271), 0);
      boolean boolean0 = buildingFoodProductKey0.equals(buildingFoodProductKey1);
      assertEquals((-1271), buildingFoodProductKey1.getBuilding());
      assertFalse(boolean0);
      assertEquals(0, buildingFoodProductKey1.getFoodProduct());
      assertFalse(buildingFoodProductKey1.equals((Object)buildingFoodProductKey0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey();
      boolean boolean0 = buildingFoodProductKey0.equals(buildingFoodProductKey0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey();
      boolean boolean0 = buildingFoodProductKey0.equals("nl.tudelft.oopp.group43.project.keys.BuildingFoodProductKey");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey((-1271), 0);
      buildingFoodProductKey0.building = 593;
      int int0 = buildingFoodProductKey0.getBuilding();
      assertEquals(593, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BuildingFoodProductKey buildingFoodProductKey0 = new BuildingFoodProductKey();
      buildingFoodProductKey0.hashCode();
      assertEquals(0, buildingFoodProductKey0.getBuilding());
      assertEquals(0, buildingFoodProductKey0.getFoodProduct());
  }
}
