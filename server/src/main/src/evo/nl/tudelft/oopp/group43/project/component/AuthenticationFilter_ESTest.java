/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:48:05 GMT 2020
 */

package nl.tudelft.oopp.group43.project.component;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import javax.servlet.FilterChain;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import nl.tudelft.oopp.group43.project.component.AuthenticationFilter;
import nl.tudelft.oopp.group43.project.models.User;
import nl.tudelft.oopp.group43.project.service.UserService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.util.matcher.RequestMatcher;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AuthenticationFilter_ESTest extends AuthenticationFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RequestMatcher requestMatcher0 = mock(RequestMatcher.class, new ViolatedAssumptionAnswer());
      AuthenticationFilter authenticationFilter0 = new AuthenticationFilter(requestMatcher0);
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "authenticationManager", (Object) authenticationManager0);
      UserDetailsService userDetailsService0 = mock(UserDetailsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "userDetailsService", (Object) userDetailsService0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "userService", (Object) userService0);
      Injector.validateBean(authenticationFilter0, (Class<?>) AuthenticationFilter.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        authenticationFilter0.successfulAuthentication(httpServletRequest0, httpServletResponse0, (FilterChain) null, (Authentication) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.component.AuthenticationFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RequestMatcher requestMatcher0 = mock(RequestMatcher.class, new ViolatedAssumptionAnswer());
      AuthenticationFilter authenticationFilter0 = new AuthenticationFilter(requestMatcher0);
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "authenticationManager", (Object) authenticationManager0);
      UserDetailsService userDetailsService0 = mock(UserDetailsService.class, new ViolatedAssumptionAnswer());
      doReturn((UserDetails) null).when(userDetailsService0).loadUserByUsername(anyString());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "userDetailsService", (Object) userDetailsService0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getUsername();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userService0).findByToken(anyString());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "userService", (Object) userService0);
      Injector.validateBean(authenticationFilter0, (Class<?>) AuthenticationFilter.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("Bearer", "Bearer").when(httpServletRequest0).getHeader(anyString());
      // Undeclared exception!
      try { 
        authenticationFilter0.attemptAuthentication(httpServletRequest0, (HttpServletResponse) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.component.AuthenticationFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AuthenticationFilter authenticationFilter0 = null;
      try {
        authenticationFilter0 = new AuthenticationFilter((RequestMatcher) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // requiresAuthenticationRequestMatcher cannot be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RequestMatcher requestMatcher0 = mock(RequestMatcher.class, new ViolatedAssumptionAnswer());
      AuthenticationFilter authenticationFilter0 = new AuthenticationFilter(requestMatcher0);
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "authenticationManager", (Object) authenticationManager0);
      UserDetailsService userDetailsService0 = mock(UserDetailsService.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "userDetailsService", (Object) userDetailsService0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userService0).findByToken(anyString());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "userService", (Object) userService0);
      Injector.validateBean(authenticationFilter0, (Class<?>) AuthenticationFilter.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("x", "x").when(httpServletRequest0).getHeader(anyString());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      try { 
        authenticationFilter0.attemptAuthentication(httpServletRequest0, httpServletResponse0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // user can not be found
         //
         verifyException("nl.tudelft.oopp.group43.project.component.AuthenticationFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RequestMatcher requestMatcher0 = mock(RequestMatcher.class, new ViolatedAssumptionAnswer());
      AuthenticationFilter authenticationFilter0 = new AuthenticationFilter(requestMatcher0);
      AuthenticationManager authenticationManager0 = mock(AuthenticationManager.class, new ViolatedAssumptionAnswer());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "authenticationManager", (Object) authenticationManager0);
      UserDetails userDetails0 = mock(UserDetails.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userDetails0).toString();
      doReturn((Collection<Object>) null).when(userDetails0).getAuthorities();
      UserDetailsService userDetailsService0 = mock(UserDetailsService.class, new ViolatedAssumptionAnswer());
      doReturn(userDetails0).when(userDetailsService0).loadUserByUsername(anyString());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "userDetailsService", (Object) userDetailsService0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("|p%;UnUU\":k-ck_MB").when(user0).getUsername();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userService0).findByToken(anyString());
      Injector.inject(authenticationFilter0, (Class<?>) AuthenticationFilter.class, "userService", (Object) userService0);
      Injector.validateBean(authenticationFilter0, (Class<?>) AuthenticationFilter.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("Authorization", "Authorization").when(httpServletRequest0).getHeader(anyString());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      Authentication authentication0 = authenticationFilter0.attemptAuthentication(httpServletRequest0, httpServletResponse0);
      authenticationFilter0.successfulAuthentication(httpServletRequest0, httpServletResponse0, filterChain0, authentication0);
      assertTrue(authentication0.isAuthenticated());
  }
}
