/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:47:07 GMT 2020
 */

package nl.tudelft.oopp.group43.project.validator;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import nl.tudelft.oopp.group43.project.models.User;
import nl.tudelft.oopp.group43.project.service.UserService;
import nl.tudelft.oopp.group43.project.validator.UserValidator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.validation.Errors;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserValidator_ESTest extends UserValidator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserValidator userValidator0 = new UserValidator();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userValidator0, (Class<?>) UserValidator.class, "userService", (Object) userService0);
      Injector.validateBean(userValidator0, (Class<?>) UserValidator.class);
      Class<User> class0 = User.class;
      boolean boolean0 = userValidator0.supports(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      boolean boolean0 = UserValidator.isValidEmailAddress("1SP_L@TOUXvg0Ndj");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      UserValidator userValidator0 = new UserValidator();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userValidator0, (Class<?>) UserValidator.class, "userService", (Object) userService0);
      Injector.validateBean(userValidator0, (Class<?>) UserValidator.class);
      Errors errors0 = mock(Errors.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(errors0).getFieldValue(anyString());
      // Undeclared exception!
      try { 
        userValidator0.validate((Object) null, errors0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.validator.UserValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      UserValidator userValidator0 = new UserValidator();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userValidator0, (Class<?>) UserValidator.class, "userService", (Object) userService0);
      Injector.validateBean(userValidator0, (Class<?>) UserValidator.class);
      // Undeclared exception!
      try { 
        userValidator0.validate((Object) null, (Errors) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Errors object must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      UserValidator userValidator0 = new UserValidator();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userValidator0, (Class<?>) UserValidator.class, "userService", (Object) userService0);
      Injector.validateBean(userValidator0, (Class<?>) UserValidator.class);
      Errors errors0 = mock(Errors.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        userValidator0.validate("Tu)", errors0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to nl.tudelft.oopp.group43.project.models.User
         //
         verifyException("nl.tudelft.oopp.group43.project.validator.UserValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        UserValidator.isValidEmailAddress((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      UserValidator userValidator0 = new UserValidator();
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(userValidator0, (Class<?>) UserValidator.class, "userService", (Object) userService0);
      Injector.validateBean(userValidator0, (Class<?>) UserValidator.class);
      Class<User> class0 = Class.class;
      boolean boolean0 = userValidator0.supports(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      boolean boolean0 = UserValidator.isValidEmailAddress("org.springframework.context.support.DefaultMessageSourceResolvable");
      assertFalse(boolean0);
  }
}
