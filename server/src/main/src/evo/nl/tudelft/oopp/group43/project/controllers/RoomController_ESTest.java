/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 22 21:46:24 GMT 2020
 */

package nl.tudelft.oopp.group43.project.controllers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Vector;
import javax.swing.JLayeredPane;
import nl.tudelft.oopp.group43.project.controllers.RoomController;
import nl.tudelft.oopp.group43.project.models.Building;
import nl.tudelft.oopp.group43.project.models.Room;
import nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater;
import nl.tudelft.oopp.group43.project.repositories.BuildingRepository;
import nl.tudelft.oopp.group43.project.repositories.RoomRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RoomController_ESTest extends RoomController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(roomRepository0).findAll();
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      RoomRepository roomRepository1 = roomAttributesUpdater0.getRoomRepository();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository1);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      List<Room> list0 = roomController0.getRoom();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      Room room0 = new Room();
      Vector<Room> vector0 = new Vector<Room>();
      vector0.add(room0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(roomRepository0).findAll();
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      RoomRepository roomRepository1 = roomAttributesUpdater0.getRoomRepository();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository1);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      List<Room> list0 = roomController0.getRoom();
      assertTrue(list0.contains(room0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      // Undeclared exception!
      try { 
        roomController0.removeRoom(787);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Building) null).when(buildingRepository0).findBuildingByBuildingNumber(anyInt());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      // Undeclared exception!
      try { 
        roomController0.getRoomByBuildingNumber(218);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      // Undeclared exception!
      try { 
        roomController0.getRoom();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(roomRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      RoomRepository roomRepository1 = roomAttributesUpdater0.getRoomRepository();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository1);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.createRoom((Room) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.controllers.RoomController", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      Room room0 = new Room();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(roomRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      RoomRepository roomRepository1 = roomAttributesUpdater0.getRoomRepository();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository1);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.createRoom(room0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to nl.tudelft.oopp.group43.project.models.Room
         //
         verifyException("nl.tudelft.oopp.group43.project.repositories.RoomRepository$MockitoMock$652523086", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      roomController0.removeRoom(3400);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      // Undeclared exception!
      try { 
        roomController0.getFilteredRooms(true, true, true, true, true, true, true, true, false, true, (-542));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nl.tudelft.oopp.group43.project.payload.RoomAttributesUpdater", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      Building building0 = new Building();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      doReturn(building0).when(buildingRepository0).findBuildingByBuildingNumber(anyInt());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      List<Room> list0 = roomController0.getRoomByBuildingNumber(628);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RoomController roomController0 = new RoomController();
      BuildingRepository buildingRepository0 = mock(BuildingRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(roomController0, (Class<?>) RoomController.class, "buildingRepository", (Object) buildingRepository0);
      RoomAttributesUpdater roomAttributesUpdater0 = new RoomAttributesUpdater();
      Vector<Room> vector0 = new Vector<Room>();
      RoomRepository roomRepository0 = mock(RoomRepository.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(roomRepository0).findAll();
      Injector.inject(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class, "roomRepository", (Object) roomRepository0);
      Injector.validateBean(roomAttributesUpdater0, (Class<?>) RoomAttributesUpdater.class);
      RoomRepository roomRepository1 = roomAttributesUpdater0.getRoomRepository();
      Injector.inject(roomController0, (Class<?>) RoomController.class, "roomRepository", (Object) roomRepository1);
      Injector.validateBean(roomController0, (Class<?>) RoomController.class);
      List<Room> list0 = roomController0.getRoom();
      assertEquals(0, list0.size());
  }
}
